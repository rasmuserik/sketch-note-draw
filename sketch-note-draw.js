// Generated by CoffeeScript 1.6.3
(function() {
  var addButtons, allStrokes, buttonAwesome, buttonFns, buttonList, ctx, currentStroke, dist, drawSegment, hasTouch, hold, kind, layout, multitouch, nextPath, nextStroke, onReady, panPos, redo, redraw, rootX, rootY, scale, strokes, touchend, touchmove, touchstart, transform, use, zoomFn;

  if (typeof isNodeJs === "undefined" || typeof runTest === "undefined") {
    (function() {
      var root;
      root = typeof window === "undefined" ? global : window;
      if (typeof isNodeJs === "undefined") {
        root.isNodeJs = typeof process !== "undefined";
      }
      if (typeof isWindow === "undefined") {
        root.isWindow = typeof window !== "undefined";
      }
      if (typeof isPhoneGap === "undefined") {
        root.isPhoneGap = typeof (typeof document !== "undefined" && document !== null ? document.ondeviceready : void 0) !== "undefined";
      }
      if (typeof runTest === "undefined") {
        return root.runTest = (isNodeJs ? process.argv[2] === "test" : location.hash.slice(1) === "test");
      }
    })();
  }

  use = isNodeJs ? (function(module) {
    return require(module);
  }) : (function(module) {
    return window[module];
  });

  onReady = function(fn) {
    if (isWindow) {
      if (document.readystate !== "complete") {
        return fn();
      } else {
        return setTimeout((function() {
          return onReady(fn);
        }), 17);
      }
    }
  };

  strokes = [];

  redo = [];

  nextStroke = void 0;

  nextPath = void 0;

  currentStroke = {
    prev: null,
    path: [],
    date: 1
  };

  allStrokes = {
    1: currentStroke
  };

  transform = false;

  hold = false;

  rootX = 0;

  rootY = 0;

  scale = 1;

  ctx = void 0;

  kind = void 0;

  multitouch = void 0;

  hasTouch = false;

  panPos = void 0;

  redraw = function() {
    var i, path, stroke, _i, _ref, _results;
    ctx.fillStyle = "white";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = "black";
    ctx.lineWidth = Math.sqrt(canvas.width * canvas.height) * 0.002;
    stroke = currentStroke;
    _results = [];
    while (stroke.prev) {
      path = stroke.path;
      ctx.beginPath();
      ctx.moveTo((path[0] + rootX) * scale, (path[1] + rootY) * scale);
      for (i = _i = 2, _ref = path.length; _i <= _ref; i = _i += 2) {
        ctx.lineTo((path[i] + rootX) * scale, (path[i + 1] + rootY) * scale);
      }
      ctx.stroke();
      _results.push(stroke = allStrokes[stroke.prev]);
    }
    return _results;
  };

  drawSegment = function(x0, y0, x1, y1) {
    ctx.beginPath();
    ctx.moveTo((x0 + rootX) * scale, (y0 + rootY) * scale);
    ctx.lineTo((x1 + rootX) * scale, (y1 + rootY) * scale);
    return ctx.stroke();
  };

  layout = function() {
    if (window.devicePixelRatio == null) {
      window.devicePixelRatio = 1;
    }
    canvas.style.position = "absolute";
    canvas.style.top = "0px";
    canvas.style.left = "0px";
    canvas.height = window.innerHeight * window.devicePixelRatio | 0;
    canvas.width = window.innerWidth * window.devicePixelRatio | 0;
    canvas.style.width = "" + window.innerWidth + "px";
    canvas.style.height = "" + window.innerHeight + "px";
    console.log(window.innerWidth, window.devicePixelRatio, canvas.width);
    addButtons();
    return redraw();
  };

  dist = function(x0, y0, x1, y1) {
    var dx, dy;
    dx = x0 - x1;
    dy = y0 - y1;
    return Math.sqrt(dx * dx + dy * dy);
  };

  touchstart = function(x, y) {
    nextPath = [x / scale - rootX, y / scale - rootY];
    nextStroke = {
      prev: currentStroke.date,
      path: nextPath,
      date: Date.now()
    };
    kind = "draw";
    return multitouch = void 0;
  };

  touchend = function() {
    if ("draw" === kind) {
      allStrokes[nextStroke.date] = nextStroke;
      currentStroke = nextStroke;
    }
    return kind = "end";
  };

  touchmove = function(x0, y0, x1, y1) {
    var current, x, y;
    if ("draw" === kind) {
      x = x0 / scale - rootX;
      y = y0 / scale - rootY;
      drawSegment(nextPath[nextPath.length - 2], nextPath[nextPath.length - 1], x, y);
      nextPath.push(x, y);
    }
    if ("pan" === kind) {
      if (panPos) {
        rootX += (x0 - panPos.x) / scale;
        rootY += (y0 - panPos.y) / scale;
        redraw();
      }
      panPos = {
        x: x0,
        y: y0
      };
    }
    if ("number" === typeof x1) {
      kind = "multitouch";
      if (!multitouch) {
        kind = "multitouch";
        return multitouch = {
          x: (x0 + x1) / 2 / scale - rootX,
          y: (y0 + y1) / 2 / scale - rootY,
          dist: dist(x0, y0, x1, y1),
          rootX: rootX,
          rootY: rootY,
          scale: scale
        };
      } else {
        current = {
          x: (x0 + x1) / 2 / multitouch.scale - multitouch.rootX,
          y: (y0 + y1) / 2 / multitouch.scale - multitouch.rootY,
          dist: dist(x0, y0, x1, y1)
        };
        scale = multitouch.scale * current.dist / multitouch.dist;
        rootX = (current.x + multitouch.rootX) * multitouch.scale / scale - multitouch.x;
        rootY = (current.y + multitouch.rootY) * multitouch.scale / scale - multitouch.y;
        return uu.nextTick(redraw());
      }
    }
  };

  buttonList = ["pan", "files", "undo", "redo", "pan", "pan", "info", "zoomin", "zoomout", "pan"];

  buttonAwesome = {
    pan: "arrows",
    zoomin: "search-plus",
    zoomout: "search-minus",
    undo: "undo",
    redo: "repeat",
    "new": "square-o",
    download: "download",
    save: "cloud-upload gray",
    load: "cloud-download gray",
    info: "question",
    files: "th"
  };

  zoomFn = function() {
    var zoomScale;
    if ("zoomin" === kind || "zoomout" === kind) {
      setTimeout(zoomFn, 20);
      zoomScale = kind === "zoomin" ? 1.05 : 1 / 1.05;
      scale *= zoomScale;
      rootX += canvas.width / scale * (1 - zoomScale) / 2;
      rootY += canvas.height / scale * (1 - zoomScale) / 2;
      return setTimeout(redraw, 0);
    }
  };

  buttonFns = {
    pan: function() {
      return panPos = void 0;
    },
    download: function() {
      var a;
      a = document.createElement("a");
      a.download = "sketch-note-draw.png";
      a.href = canvas.toDataURL();
      a.target = "_blank";
      document.body.appendChild(a);
      a.click();
      return document.body.removeChild(a);
    },
    zoomin: zoomFn,
    zoomout: zoomFn,
    undo: function() {
      if (currentStroke.prev) {
        redo.push(currentStroke);
        currentStroke = allStrokes[currentStroke.prev];
        return redraw();
      }
    },
    redo: function() {
      if (redo.length) {
        currentStroke = redo.pop();
        return redraw();
      }
    },
    "new": function() {
      if (strokes.length) {
        currentStroke = allStrokes[1];
        return redraw();
      }
    }
  };

  buttonFns.files = buttonFns["new"];

  addButtons = function() {
    var button, buttonId, buttons, i, s, _fn, _i, _ref, _results;
    buttons = document.getElementById("buttons");
    buttons.innerHTML = "";
    _fn = function(buttonId) {
      var touchhandler;
      touchhandler = function(e) {
        e.stopPropagation();
        e.preventDefault();
        kind = buttonId;
        return typeof buttonFns[buttonId] === "function" ? buttonFns[buttonId]() : void 0;
      };
      button.ontouchstart = function(e) {
        hasTouch = true;
        return touchhandler(e);
      };
      return button.onmousedown = function(e) {
        if (!hasTouch) {
          return touchhandler(e);
        }
      };
    };
    _results = [];
    for (i = _i = 0, _ref = buttonList.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      buttonId = buttonList[i];
      button = document.createElement("i");
      button.className = "fa fa-" + buttonAwesome[buttonId];
      _fn(buttonId);
      button.style.WebkitTapHighlightColor = "rgba(0,0,0,0)";
      button.style.tapHighlightColor = "rgba(0,0,0,0)";
      button.style.position = "absolute";
      button.style.fontSize = "36px";
      button.style.padding = "4px";
      button.style.top = i < 5 ? "0px" : "" + (window.innerHeight - 44) + "px";
      s = (window.innerWidth - 5 * 44) / 4 + 44;
      button.style.left = "" + ((i % 5) * s) + "px";
      _results.push(buttons.appendChild(button));
    }
    return _results;
  };

  onReady(function() {
    ctx = canvas.getContext("2d");
    layout();
    uu.domListen(window, "touchstart", function(e) {
      e.preventDefault();
      hasTouch = true;
      if (1 === e.touches.length) {
        return touchstart(e.touches[0].clientX * devicePixelRatio, e.touches[0].clientY * devicePixelRatio);
      }
    });
    uu.domListen(window, "mousedown", function(e) {
      e.preventDefault();
      if (!hasTouch) {
        return touchstart(e.clientX * devicePixelRatio, e.clientY * devicePixelRatio);
      }
    });
    uu.domListen(window, "touchmove", function(e) {
      var args, touch, _i, _len, _ref;
      e.preventDefault();
      args = [];
      _ref = e.touches;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        touch = _ref[_i];
        args.push(touch.clientX * devicePixelRatio);
        args.push(touch.clientY * devicePixelRatio);
      }
      return touchmove.apply(null, args);
    });
    uu.domListen(window, "mousemove", function(e) {
      e.preventDefault();
      return touchmove(e.clientX * devicePixelRatio, e.clientY * devicePixelRatio);
    });
    uu.domListen(window, "touchend", function(e) {
      return touchend();
    });
    uu.domListen(window, "mouseup", function(e) {
      if (!hasTouch) {
        return touchend();
      }
    });
    return uu.domListen(window, "resize", function(e) {
      return layout();
    });
  });

}).call(this);
